
    util seq(funcs, done) should return a function that runs asynchronous functions in funcs in order: [2K[0G  â€¤ util seq(funcs, done) should return a function that runs asynchronous functions in funcs in order
    util seq(funcs, done) should handle errors by calling done with the error: [2K[0G  â€¤ util seq(funcs, done) should handle errors by calling done with the error
    util seq(funcs, done) should handle exceptions thrown by functions by calling done with the exception: [2K[0G  â€¤ util seq(funcs, done) should handle exceptions thrown by functions by calling done with the exception
    util seq(funcs, done) should call done with no error if all is successful: [2K[0G  â€¤ util seq(funcs, done) should call done with no error if all is successful
    util seq(funcs, done) _.to(names...) should return a function that places the corresponding arguments in "this" (skipping err): [2K[0G  â€¤ util seq(funcs, done) _.to(names...) should return a function that places the corresponding arguments in "this" (skipping err)
    util timeUid() should return a unique string: [2K[0G  â€¤ util timeUid() should return a unique string
    util timeUid() should return a larger value when called over one millisecond later: [2K[0G  â€¤ util timeUid() should return a larger value when called over one millisecond later
    MongoFS should retrieve the value with placed with the highest _ts value: [2K[0G  â€¤ MongoFS should retrieve the value with placed with the highest _ts value
    MongoFS .get(path, callback(err, file)) should retrieve the value of a file: [2K[0G  â€¤ MongoFS .get(path, callback(err, file)) should retrieve the value of a file
    MongoFS .get(path, callback(err, file)) should retrieve the last value in the array, regardless of the _ts value: [2K[0G  â€¤ MongoFS .get(path, callback(err, file)) should retrieve the last value in the array, regardless of the _ts value
    MongoFS .put(path, file, callback(err)) should write a file so that get() retrieves it: [2K[0G  â€¤ MongoFS .put(path, file, callback(err)) should write a file so that get() retrieves it
    MongoFS .put(path, file, callback(err)) should assign a timestamp to a file if one is not provided: [2K[0G  â€¤ MongoFS .put(path, file, callback(err)) should assign a timestamp to a file if one is not provided
    MongoFS .put(path, file, callback(err)) should reflect the provided timestamp if one is given: [2K[0G  â€¤ MongoFS .put(path, file, callback(err)) should reflect the provided timestamp if one is given
    MongoFS .batchPut(keyVals, callback(err)) should put files for all key/value pairs in the given object: [2K[0G  â€¤ MongoFS .batchPut(keyVals, callback(err)) should put files for all key/value pairs in the given object
    MongoFS .getDir(path, expandFiles, callback(err, content)) should retrieve the names of all files and sub-dirs in the directory: [2K[0G  â€¤ MongoFS .getDir(path, expandFiles, callback(err, content)) should retrieve the names of all files and sub-dirs in the directory
    MongoFS .getDir(path, expandFiles, callback(err, content)) should retrieve the values of all files in the directory, if expandFiles is set to true: [2K[0G  â€¤ MongoFS .getDir(path, expandFiles, callback(err, content)) should retrieve the values of all files in the directory, if expandFiles is set to true
    MongoFS .remove(path, timestamp, callback(err)) should remove a file of the given path: [2K[0G  â€¤ MongoFS .remove(path, timestamp, callback(err)) should remove a file of the given path
    MongoFS .remove(path, timestamp, callback(err)) sould remove a file only if the removal timestamp is greater than the latest: [2K[0G  â€¤ MongoFS .remove(path, timestamp, callback(err)) sould remove a file only if the removal timestamp is greater than the latest
    MongoFS .createMapping(path, mapping, callback(err, actions)) should add an entry in the ".m" sub-document of the directory: [2K[0G  â€¤ MongoFS .createMapping(path, mapping, callback(err, actions)) should add an entry in the ".m" sub-document of the directory
    MongoFS .createMapping(path, mapping, callback(err, actions)) should emit actions including the mapping for all files in the directory: [2K[0G  â€¤ MongoFS .createMapping(path, mapping, callback(err, actions)) should emit actions including the mapping for all files in the directory
    MongoFS .createMapping(path, mapping, callback(err, actions)) should emit actions so that when sending the "tramp" actions back, we get mappings for all files in the sub-tree: [2K[0G  â€¤ MongoFS .createMapping(path, mapping, callback(err, actions)) should emit actions so that when sending the "tramp" actions back, we get mappings for all files in the sub-tree
    MongoFS .createMapping(path, mapping, callback(err, actions)) should work whether or not the directory already exists: [2K[0G  â€¤ MongoFS .createMapping(path, mapping, callback(err, actions)) should work whether or not the directory already exists
    MongoFS .createMapping(path, mapping, callback(err, actions)) with .put() should cause subsequent calls to .put() emit the mapping for the new object: [2K[0G  â€¤ MongoFS .createMapping(path, mapping, callback(err, actions)) with .put() should cause subsequent calls to .put() emit the mapping for the new object
    MongoFS .createMapping(path, mapping, callback(err, actions)) with .put() should cause put() that overrides an existing value provide mapping for the new value and unmapping for the old one: [2K[0G  â€¤ MongoFS .createMapping(path, mapping, callback(err, actions)) with .put() should cause put() that overrides an existing value provide mapping for the new value and unmapping for the old one
    MongoFS .createMapping(path, mapping, callback(err, actions)) with .remove() should emit unmapping of the removed content: [2K[0G  â€¤ MongoFS .createMapping(path, mapping, callback(err, actions)) with .remove() should emit unmapping of the removed content
    MongoFS .removeMapping(path, tsid, callback(err, actions)) should remove the mapping with tsid from path, and produce actions to undo its effect: [2K[0G  â€¤ MongoFS .removeMapping(path, tsid, callback(err, actions)) should remove the mapping with tsid from path, and produce actions to undo its effect

  26 passing (264 ms)

