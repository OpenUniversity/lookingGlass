
    MongoFS as StorageDriver should support any kind of characters in paths, with the exception that slash (/) and star (*): [2K[0G  â€¤ MongoFS as StorageDriver should support any kind of characters in paths, with the exception that slash (/) and star (*)
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) should allow for multiple get and put operations to be performed atomically: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) should allow for multiple get and put operations to be performed atomically
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) should retrieve the value with the highest _ts value: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) should retrieve the value with the highest _ts value
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) get should retrieve the value of a file: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) get should retrieve the value of a file
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) get should retrieve the latest version prior to the transaction timestamp if one is stored: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) get should retrieve the latest version prior to the transaction timestamp if one is stored
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) get should retrieve the earliest stored version if latest prior to ts is not stored: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) get should retrieve the earliest stored version if latest prior to ts is not stored
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) get should not find the file if it was created past the transaction ts, as long as enough versions are stored: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) get should not find the file if it was created past the transaction ts, as long as enough versions are stored
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) put should write a file so that "get" retrieves it: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) put should write a file so that "get" retrieves it
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) put should assign a timestamp to a file if one is not provided: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) put should assign a timestamp to a file if one is not provided
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) put should reflect the provided timestamp if one is given: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) put should reflect the provided timestamp if one is given
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) map should emit actions including the mapping for all files in the directory
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) map should emit actions so that when sending the "tramp" actions back, we get mappings for all files in the sub-tree
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) map should work whether or not the directory already exists
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) map should propagate to future subdirectories
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) map with put should cause subsequent puts emit the mapping for the new object
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) map with put should cause puts that overrides an existing value provide mapping for the new value and unmapping for the old one
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) map with remove should emit unmapping of the removed content
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) unmap should remove the mapping with ts from path, and produce actions to undo its effect
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) remove should remove a file of the given path: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) remove should remove a file of the given path
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) remove should remove a file only if the removal timestamp is greater than the latest: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) remove should remove a file only if the removal timestamp is greater than the latest
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) getIfExists should emit content actions only for the files that exist in the list: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) getIfExists should emit content actions only for the files that exist in the list
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) getDir should emit dir actions for all files in the directory
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) getDir should behave properly when used in conjunction with get
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) getDir should emit content entries with file contents when using the expandFiles option
  - MongoFS as StorageDriver .transaction(trans, callback(err, result)) getDir should not emit files that have been deleted
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) tsCond should cause the transaction to be canceled if one of the given files does not have the corresponding ts value: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) tsCond should cause the transaction to be canceled if one of the given files does not have the corresponding ts value
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) tsCond should allow the transaction to happen if the timestamps are accurate: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) tsCond should allow the transaction to happen if the timestamps are accurate
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) accum should create files containing numbers, when given names that do not exist: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) accum should create files containing numbers, when given names that do not exist
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) accum should add the given number to each file, and emit the previous value: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) accum should add the given number to each file, and emit the previous value
    MongoFS as StorageDriver .transaction(trans, callback(err, result)) accumReset should reset the given accumulators, so that subsequent reads receive 0: [2K[0G  â€¤ MongoFS as StorageDriver .transaction(trans, callback(err, result)) accumReset should reset the given accumulators, so that subsequent reads receive 0

  18 passing (171 ms)
  12 pending

